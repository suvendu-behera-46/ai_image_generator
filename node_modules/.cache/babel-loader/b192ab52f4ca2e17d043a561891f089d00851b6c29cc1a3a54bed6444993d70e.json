{"ast":null,"code":"export const GATEWAY = new URL('https://nftstorage.link/');\n\n/**\n * @typedef {string|URL} GatewayURL Base URL of an IPFS Gateway e.g. https://dweb.link/ or https://ipfs.io/\n * @typedef {{ gateway?: GatewayURL }} GatewayURLOptions\n */\n\n/**\n * Convert an IPFS URL (starting ipfs://) to a gateway URL (starting https://)\n * that can be used in a webpage. If the passed URL is not an IPFS URL it is\n * returned as a new URL object with no further changes.\n *\n * @param {string|URL} url An IPFS URL e.g. ipfs://bafy.../path\n * @param {GatewayURLOptions} [options] Options that allow customization of the gateway used.\n * @returns {URL} An IPFS gateway URL e.g. https://nftstorage.link/ipfs/bafy.../path\n */\nexport const toGatewayURL = function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const gateway = options.gateway || GATEWAY;\n  url = new URL(String(url));\n  return url.protocol === 'ipfs:' ? new URL(`/ipfs/${url.href.slice('ipfs://'.length)}`, gateway) : url;\n};","map":{"version":3,"names":["GATEWAY","URL","toGatewayURL","url","options","gateway","String","protocol","href","slice","length"],"sources":["/Users/suvendubehera/Projects/BlockChain/ai_nft_generator/node_modules/nft.storage/src/gateway.js"],"sourcesContent":["export const GATEWAY = new URL('https://nftstorage.link/')\n\n/**\n * @typedef {string|URL} GatewayURL Base URL of an IPFS Gateway e.g. https://dweb.link/ or https://ipfs.io/\n * @typedef {{ gateway?: GatewayURL }} GatewayURLOptions\n */\n\n/**\n * Convert an IPFS URL (starting ipfs://) to a gateway URL (starting https://)\n * that can be used in a webpage. If the passed URL is not an IPFS URL it is\n * returned as a new URL object with no further changes.\n *\n * @param {string|URL} url An IPFS URL e.g. ipfs://bafy.../path\n * @param {GatewayURLOptions} [options] Options that allow customization of the gateway used.\n * @returns {URL} An IPFS gateway URL e.g. https://nftstorage.link/ipfs/bafy.../path\n */\nexport const toGatewayURL = (url, options = {}) => {\n  const gateway = options.gateway || GATEWAY\n  url = new URL(String(url))\n  return url.protocol === 'ipfs:'\n    ? new URL(`/ipfs/${url.href.slice('ipfs://'.length)}`, gateway)\n    : url\n}\n"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG,IAAIC,GAAG,CAAC,0BAA0B,CAAC;;AAE1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,UAACC,GAAG,EAAmB;EAAA,IAAjBC,OAAO,uEAAG,CAAC,CAAC;EAC5C,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO,IAAIL,OAAO;EAC1CG,GAAG,GAAG,IAAIF,GAAG,CAACK,MAAM,CAACH,GAAG,CAAC,CAAC;EAC1B,OAAOA,GAAG,CAACI,QAAQ,KAAK,OAAO,GAC3B,IAAIN,GAAG,CAAE,SAAQE,GAAG,CAACK,IAAI,CAACC,KAAK,CAAC,SAAS,CAACC,MAAM,CAAE,EAAC,EAAEL,OAAO,CAAC,GAC7DF,GAAG;AACT,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}