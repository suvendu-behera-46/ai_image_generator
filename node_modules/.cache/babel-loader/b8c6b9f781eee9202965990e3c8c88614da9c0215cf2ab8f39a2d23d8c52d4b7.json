{"ast":null,"code":"/**\n * An implementation of the CAR reader interface that is backed by a blockstore.\n *\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@ipld/car/api').CarReader} CarReader\n * @implements {CarReader}\n */\nexport class BlockstoreCarReader {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {import('ipfs-car/blockstore').Blockstore} blockstore\n   */\n  constructor(version, roots, blockstore) {\n    /**\n     * @private\n     */\n    this._version = version;\n    /**\n     * @private\n     */\n    this._roots = roots;\n    /**\n     * @private\n     */\n    this._blockstore = blockstore;\n  }\n  get version() {\n    return this._version;\n  }\n  get blockstore() {\n    return this._blockstore;\n  }\n  async getRoots() {\n    return this._roots;\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  has(cid) {\n    return this._blockstore.has(cid);\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  async get(cid) {\n    const bytes = await this._blockstore.get(cid);\n    return {\n      cid,\n      bytes\n    };\n  }\n  blocks() {\n    return this._blockstore.blocks();\n  }\n  async *cids() {\n    for await (const b of this.blocks()) {\n      yield b.cid;\n    }\n  }\n}","map":{"version":3,"names":["BlockstoreCarReader","constructor","version","roots","blockstore","_version","_roots","_blockstore","getRoots","has","cid","get","bytes","blocks","cids","b"],"sources":["/Users/suvendubehera/Projects/BlockChain/ai_image_generator/node_modules/nft.storage/src/bs-car-reader.js"],"sourcesContent":["/**\n * An implementation of the CAR reader interface that is backed by a blockstore.\n *\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@ipld/car/api').CarReader} CarReader\n * @implements {CarReader}\n */\nexport class BlockstoreCarReader {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {import('ipfs-car/blockstore').Blockstore} blockstore\n   */\n  constructor(version, roots, blockstore) {\n    /**\n     * @private\n     */\n    this._version = version\n    /**\n     * @private\n     */\n    this._roots = roots\n    /**\n     * @private\n     */\n    this._blockstore = blockstore\n  }\n\n  get version() {\n    return this._version\n  }\n\n  get blockstore() {\n    return this._blockstore\n  }\n\n  async getRoots() {\n    return this._roots\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  has(cid) {\n    return this._blockstore.has(cid)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  async get(cid) {\n    const bytes = await this._blockstore.get(cid)\n    return { cid, bytes }\n  }\n\n  blocks() {\n    return this._blockstore.blocks()\n  }\n\n  async *cids() {\n    for await (const b of this.blocks()) {\n      yield b.cid\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,mBAAmB,CAAC;EAC/B;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAACC,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAE;IACtC;AACJ;AACA;IACI,IAAI,CAACC,QAAQ,GAAGH,OAAO;IACvB;AACJ;AACA;IACI,IAAI,CAACI,MAAM,GAAGH,KAAK;IACnB;AACJ;AACA;IACI,IAAI,CAACI,WAAW,GAAGH,UAAU;EAC/B;EAEA,IAAIF,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACG,QAAQ;EACtB;EAEA,IAAID,UAAUA,CAAA,EAAG;IACf,OAAO,IAAI,CAACG,WAAW;EACzB;EAEA,MAAMC,QAAQA,CAAA,EAAG;IACf,OAAO,IAAI,CAACF,MAAM;EACpB;;EAEA;AACF;AACA;EACEG,GAAGA,CAACC,GAAG,EAAE;IACP,OAAO,IAAI,CAACH,WAAW,CAACE,GAAG,CAACC,GAAG,CAAC;EAClC;;EAEA;AACF;AACA;EACE,MAAMC,GAAGA,CAACD,GAAG,EAAE;IACb,MAAME,KAAK,GAAG,MAAM,IAAI,CAACL,WAAW,CAACI,GAAG,CAACD,GAAG,CAAC;IAC7C,OAAO;MAAEA,GAAG;MAAEE;IAAM,CAAC;EACvB;EAEAC,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACN,WAAW,CAACM,MAAM,CAAC,CAAC;EAClC;EAEA,OAAOC,IAAIA,CAAA,EAAG;IACZ,WAAW,MAAMC,CAAC,IAAI,IAAI,CAACF,MAAM,CAAC,CAAC,EAAE;MACnC,MAAME,CAAC,CAACL,GAAG;IACb;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}